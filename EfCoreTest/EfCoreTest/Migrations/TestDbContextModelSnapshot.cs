// <auto-generated />
using System;
using EfCoreTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfCoreTest.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EfCoreTest.关系配置.多对多.Student", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.ToTable("T_Students");
                });

            modelBuilder.Entity("EfCoreTest.关系配置.多对多.StudentTeacherRelation", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeacherCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.ToTable("T_StudentTeacherRelations");
                });

            modelBuilder.Entity("EfCoreTest.关系配置.多对多.Teacher", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.ToTable("T_Teachers");
                });

            modelBuilder.Entity("EfCoreTest.关系配置.一对多.Article", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Code");

                    b.ToTable("T_Articles");
                });

            modelBuilder.Entity("EfCoreTest.关系配置.一对多.Comment", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AriticleCodeRef")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("AuditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Code");

                    b.HasIndex("AriticleCodeRef");

                    b.ToTable("T_Comments");
                });

            modelBuilder.Entity("EfCoreTest.关系配置.一对一.Delivery", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCodeRef")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.HasIndex("OrderCodeRef")
                        .IsUnique();

                    b.ToTable("T_Delivery");
                });

            modelBuilder.Entity("EfCoreTest.关系配置.一对一.Order", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("T_Orders");
                });

            modelBuilder.Entity("EfCoreTest.model.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PubTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("T_Books", (string)null);
                });

            modelBuilder.Entity("EfCoreTest.model.Dog", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Code");

                    b.ToTable("T_Dog", (string)null);
                });

            modelBuilder.Entity("EfCoreTest.model.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Newcolumn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("T_Users");
                });

            modelBuilder.Entity("StudentStudentTeacherRelation", b =>
                {
                    b.Property<string>("StudentTeacherRelationsCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentsCode")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StudentTeacherRelationsCode", "StudentsCode");

                    b.HasIndex("StudentsCode");

                    b.ToTable("StudentStudentTeacherRelation");
                });

            modelBuilder.Entity("StudentTeacherRelationTeacher", b =>
                {
                    b.Property<string>("StudentTeacherRelationsCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeachersCode")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StudentTeacherRelationsCode", "TeachersCode");

                    b.HasIndex("TeachersCode");

                    b.ToTable("StudentTeacherRelationTeacher");
                });

            modelBuilder.Entity("EfCoreTest.关系配置.一对多.Comment", b =>
                {
                    b.HasOne("EfCoreTest.关系配置.一对多.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("AriticleCodeRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("EfCoreTest.关系配置.一对一.Delivery", b =>
                {
                    b.HasOne("EfCoreTest.关系配置.一对一.Order", "Order")
                        .WithOne("Delivery")
                        .HasForeignKey("EfCoreTest.关系配置.一对一.Delivery", "OrderCodeRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("StudentStudentTeacherRelation", b =>
                {
                    b.HasOne("EfCoreTest.关系配置.多对多.StudentTeacherRelation", null)
                        .WithMany()
                        .HasForeignKey("StudentTeacherRelationsCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCoreTest.关系配置.多对多.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentTeacherRelationTeacher", b =>
                {
                    b.HasOne("EfCoreTest.关系配置.多对多.StudentTeacherRelation", null)
                        .WithMany()
                        .HasForeignKey("StudentTeacherRelationsCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCoreTest.关系配置.多对多.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EfCoreTest.关系配置.一对多.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("EfCoreTest.关系配置.一对一.Order", b =>
                {
                    b.Navigation("Delivery")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
